class Solution {
    public int trap(int[] height) {
        if(height.length==0) return 0;
        int[] max_left = new int[height.length];
        int[] max_right = new int[height.length];
        max_left[0] = height[0];
        for (int i = 1; i < height.length - 1; i++) {
            max_left[i] = Math.max(max_left[i - 1], height[i]);
        }
        max_right[height.length - 1] = height[height.length - 1];
        for (int i = height.length - 2; i > 0; i--) {
            max_right[i] = Math.max(max_right[i + 1], height[i]);
        }
        int ans = 0;
        for (int i = 1; i < height.length-1; i++) {
            ans += Math.min(max_left[i], max_right[i]) - height[i];
        }
        return ans;
    }
}
//runtime:1 ms
//memory:36.8 MB
